1.c++ 学习策略： 
1).依靠解决问题来学习 2).实践：编程，测试，改bug

2.第一个c++程序： 
#include <iostream>

int main()
{
    // display Aloha to the console.
    std:: cout << "Aloha world!" << std::endl;

    return 0;
}
  

3.编码规范38：不准使用 制表 和 分页 等特殊字符

4.编码规范68：总是将函数返回值明确列出的

5.namespace:
类似于一个圈定的范围，如果在该名词空间就会起作用，不在就没有，如：

namespace car
namespace qq

car:: qq
则是第一个对象被引用

6.namespace 推荐用法：

#include <iostream>

using namespace std::cout;
using namespace endl;
int main()
{
    // display Aloha to the console.
    cout << "Aloha world!" << endl;

    return 0;
}


7.编译过程：
预处理――》编译――》汇编――》链接
        生成汇编代码  生成机器代码 生成可执行文件

8.编码规范6：函数名必须是动词（或者动宾短语），名字中的各个单词首字母大写，其余字母小写，但函数的首字母要小写，如：
displayMessage()
computeTotalWidth()

9.编码规范3：代表类型的名字必须首字母大写并且其他字母大小写混合，如：
typedef xxx NewTypeName

typedef unsigned int UInt
typedef unsigned int* PInt

10.编码规范5：命名常量（包括枚举值）必须全部大写并由下划分隔单词

MAX_ITERATIONS

11.编码规范26：布尔变量/函数的命名应使用前缀"is"

bool isSet, isVisible;
bool isBoy();
bool canFound();

12.bool示例

#include <iostream>

int main()
{
    bool isAlpha;
    isAlpha = false;

    // display Aloha to the console.
    std:: cout << "isAlpha = " << isAlpha << std::endl;

    std:: cout << std::boolisAlpha << 
                  "isAlpha = " << isAlpha << std::endl;

    return 0;
}

13.编码规范39：断行必须很明显（在逗号或运算符后换行， 新行要对齐）

14.编码规范45：类型转换必须显示声明，永远不要依赖隐式类型转换

e:
floatValue = static_cast<float>(intValue)

std:: cout << static_cast<double> (1)/2; 

15.变量的初始化：

int x = 1;

int x(1); //c++

int x, x(1); // Error!

16.变量的局部作用域：

void function(){
    for (int i = 0; i < 10; i++){
    
        int j;  
    } // i的作用域为从循环开始到结束

}

--------------------------------------------
void function(){

    for (int i = 0; i < 10; i++){
    
        int j;  
    } // i的作用域为从循环开始到结束

    for (int i = 0; i < 10; i++){
        int j;
    }
    //可在两个非嵌套的块中声明两个i
}

------------------------------------------
void function(){

    int i = 0;
    for (int i = 0; i < 10; i++){
    
        int j;  
    }

    //不可在两个嵌套的块中声明两个i
}

17.一元作用域解析符 ::

局部变量名与全局变量名相同时，可用::访问全局变量

#include <iostream>

int v1 = 10;

int main()
{
    int v1 = 5;

    std:: cout << "local variable v1 = " << v1 << std:: endl;
    std:: cout << "global variable v1 = " << ::v1 << std:: endl; 

    return 0;
}

18. 编译器如何匹配重载函数(同名不同参数的函数)调用
――》看参数：个数 类型 顺序

#include <iostream>

int maxNumber(int num1, int num2)
{
    if (num1 > num2){
        return num1;
    }else{
        return num2; 
    }   
}

int maxNumber(double num1, double num2)
{
    if (num1 > num2){
        return num1;
    }else{
        return num2;
    } 
}

int main()
{
    std:: cout << maxNumber(1, 2) << std:: endl;
    return 0;
}

19.函数默认参数
可以声明带默认参数值的函数 定义时：参数列表中默认值参数应后置          void t1(int x, int y = 0, int z = 0);
无参调用函数时，默认值会被传递给形式参数 调用时：参数列表中实参应前置  t1(1);

#include <iostream>

void printArea(double radius = 1)
{

    double area = raius * radius * 3.14159;
    std:: cout << "Area is " << area << std:: endl;
}

int main()
{
    printArea();
    printArea(4);
    return 0;
}

20.debug一段代码

void printArea(double radius = 1); 1.将 "=1" 改为 "=2",能否解决问题
                                   2.将 "=1" 删掉，可行否？
                                   3.将定义的一整行删掉，能否解决？

int main()
{
    printArea();
    printArea(4);
    return 0;
}

void printArea(double radius = 2) 4.将 "=2" 改为 "=1" 
{                                 5.将 "=2" 删掉            
    pass // do something 
}

修改为：选项5


21.bebug 

#include <iostream>

using namespace std::cout;
using namespace std::endl;

int add(int x, int y = 10)
{
    return x + y;
}

int add(int x)
{
    return x + 100;
}

int main()
{
    add(1);
    cin.get();
    return 0;
}

在main函数中调用add函数时会产生冲突


22.内联函数（inline Functions）

函数的分析：

Advantage 易读易维护
Disadvantage 运行时性能开销大

使用内联函数
目的：减小性能开销
方法：将代码插入到调用处
结果：使程序变大        
总结：以空间换时间

eg:
inline int max(int a, int b)
{
    return (a > b ? a : b);
}

但是不要：
int max(int a, int b);
// call max()

inline int max(int a, int b)
{
    return (a > b ? a : b);
}

内联函数只是一种编译机制
inline是对编译器的请求，不是命令，所有有可能不会执行
使用于短函数
大多数编译器不会把带有循环，递归等或者代码比较多的函数进行内联编译


23.引用：
1). 引用就是另一个变量的别名
2). 通过对引用变量做操作就能够对读写变量做操作

int x;
int& y = x;

eg:
int x = 0;
int& y = x;

y++;
std:: cout << x << std:: endl;

>>>1


24.编码规范51：C++ 指针与引用符号应该靠近其类型名而非名字
eg: float* x; int& y;

25.引用可做函数参数，但调用时只需传普通变量即可，在被调用函数中改变引用变量的值，则改变的是实参的值

void swap(int& x, int& y)
{
    int t = x;
    x = y;
    y = x;
}

int a = 1;
int b = 2;

swap(a, b);

std:: cout << a;
std:: cout << " " << b << std:: endl;

>>>2 1

26.c++ 中通过new申请动态内存
new <类型名>(初值) //申请一个变量的空间
new <类型名>[常量表达式(长度)] //申请数组

如果申请成果，返回指定类型内存的地址；！！！！
如果申请失败，返回空指针(整数0)

使用动态内存完毕之后，用delete来释放
delete <指针名>;    //删除一个变量/对象
delete []<指针名>;  //删除数组空间

27.编码规范70: c++用“0”代替NULL;

c: 
char* s = (char* )malloc(sizeof(char));
free(s);

c++:
char* s = new char(49); //注意！这里返回的是指针！！
delete s;

28.c++ 内存模型：
stack:
编译器自动分配
Heap:
一般为程序员分配
堆向高地址方向生长，栈向低地址方向生长

Global/Static
程序启动时就在此，程序结束时候释放
Const
所有常量都放一起，该区域内容不可更改

eg:
int arr[3];

int myFunc()
{
    int a;
    char* p;
    char* str = "Hello world!";   
    
}

数组在全局变量区，字符在常量区， a，p，str在栈区

int myFunc1(int* pi)
{
    char* pc;
    pc = static_cast<char*> new char[8];   

}
内部的数组在堆区（因为使用new申请的），pc，pi在栈区

对于数组a[]，a是数组a[]的首地址别名（指针常量）即其地址是不可变的
访问里面的元素可以用：
a[0], a[1]
*(a+0), *(a+1)

29.命名常量
const double PI = 3.1415;
const int size = 3;

eg:
const int ARRAY_SIZE = 10;
int arr[ARRAY_SIZE];//OK in c++, ERROR in c
因为数组里面的长度必须为常量。这种常量的命名方式在c++可行，c不可行（define ARRAY_SIZE 10）

30.
Pointer to Const（常量指针）
特征：指针所指向的内容不可通过指针的间接引用（*p）来改变

const int* p1;
const int x = 1; 
p1 = &x; //如果要用常量指针指向一个值，那么该值必须用Const

*p1= 10; //ERROR，所指值不可变

Pointer Const（指针常量）
指针本身的内容是个常量，不可以改变

int x = 1, y = 1;
int* const p2 = &x;

*p2 = 10; //Okay
p2 = &y;  //ERROR （指针是个常量）

数组名就是一个指针常量

int a[] = {1,2,3};
a = a+1; //ERROR

31.指针内存布局

以下代码在函数内部：
const int a = 5;
int b = 9;
const int* pa = &a;
int* const pb = &b;

a，pb在常量区 pa,b在栈区

总结：
const int* x;
int* const y;

const在谁前面，谁就不允许改变

32.面对对象的特征
A PIE：A抽象 P多态 I继承 E封装

对象由属性和函数构成，它是类的具体化，对象是类的实例

int ia;
struct S {int m; int n;};
S sa;

class C
{
    int p;
    int f();
};
C ca; ca即为对象

类由数据域和构造函数构成
eg：
class Circle
{
public: 
  double radius; //数据域
  Circle()       //构造函数，与类名相同，可以不声明构造函数，编译器会提供一个无参构造函数
  {
    raduis = 1;
  }
  Circle(double newRadius) //重载构造函数
  {
    radius = newRadius; 
  }

  double getArea()  //method
  {
    return radius * radius * 3.14159; 
  }

};

构造函数：
初始化对象
与类同名
无返回值
可重载
可不带参数

对象访问运算符
Circle c1(5); //创建对象
Circle c2();

c1.radius
>>>5
c1.getArea()
>>>

33.为对象和类命名

声明一个自定义的类时，类名中的单词首字母要大写

class Circle
{
}

对象的命名方式与变量类似

Circle c1;

类是一种数据类型：
用基本类型定义对象：int x(4); 
用类名定义对象：    Circle circle1；Circle circle2(4);

34.成员拷贝
利用‘=’将一个对象的内容拷贝给另一个对象，默认情况下，对象的每个数据域都被拷贝到另一个对象的对应部分

circle2 = circle1;
将circle1的半径拷贝给circle2，虽然它们半径相同，但是它们还是不同的对象

35.c++里面用Class 来代替了 struct

struct Student
{
  int id;
  char firstName[20];
};

class Student
{
public:
  int id;
  char firstName[20];
};

36.c++中的声明与实现分离
类声明描述了类的约定
类实现则实现该约定

.h:    类声明
.cpp : 类实现 FunctionType ClassName:: FunctionName(Arguments){}
                                    域分隔符

Circle.h:

class Circle
{
public:
  double radius;
  
  Circle();

  Circle(double);

  double getArea();
};

Circle.cpp:

Circle:: Circle(){
  radius = 1; 
}

Circle:: Circle(double newRadius){
  radius = newRadius;
}

double Circle:: getArea(){
  return radius * radius * 3.1415926;
}

mian.cpp:

#include <iostream>
#include "Circle.h"

int main()
{
    Circle c1;
    Circle c2(5.0);
  
    std:: cout << c1.getArea() << std:: endl;

    std:: cout << c2.getArea() << std:: endl;
  
    return 0;
}

编译的时候为 g++ Circle.cpp main.cpp


37.内联函数和内敛声明

当函数在类声明中实现，它自动成为内联函数

class A {
  inline f();
};
A::f(){}
-----------------------------
class A {
  f() { //do something
  }
};
-----------------------------
class A{
  f();
}
inline A::f() {
  //do something
}



